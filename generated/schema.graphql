### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Answer {
  answer: String!
  author: User!
  createdAt: DateTime!
  id: String!
  question: Question
  updatedAt: DateTime!
}

input AnswerCreateInput {
  answer: String!
  author: UserCreateNestedOneWithoutAnswersInput!
  createdAt: DateTime
  id: String
  question: QuestionCreateNestedOneWithoutAnswersInput
  updatedAt: DateTime
}

input AnswerCreateNestedManyWithoutAuthorInput {
  connect: [AnswerWhereUniqueInput!]
  connectOrCreate: [AnswerCreateOrConnectWithoutAuthorInput!]
  create: [AnswerCreateWithoutAuthorInput!]
}

input AnswerCreateNestedManyWithoutQuestionInput {
  connect: [AnswerWhereUniqueInput!]
  connectOrCreate: [AnswerCreateOrConnectWithoutQuestionInput!]
  create: [AnswerCreateWithoutQuestionInput!]
}

input AnswerCreateOrConnectWithoutAuthorInput {
  create: AnswerCreateWithoutAuthorInput!
  where: AnswerWhereUniqueInput!
}

input AnswerCreateOrConnectWithoutQuestionInput {
  create: AnswerCreateWithoutQuestionInput!
  where: AnswerWhereUniqueInput!
}

input AnswerCreateWithoutAuthorInput {
  answer: String!
  createdAt: DateTime
  id: String
  question: QuestionCreateNestedOneWithoutAnswersInput
  updatedAt: DateTime
}

input AnswerCreateWithoutQuestionInput {
  answer: String!
  author: UserCreateNestedOneWithoutAnswersInput!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input AnswerListRelationFilter {
  every: AnswerWhereInput
  none: AnswerWhereInput
  some: AnswerWhereInput
}

input AnswerScalarWhereInput {
  AND: [AnswerScalarWhereInput!]
  NOT: [AnswerScalarWhereInput!]
  OR: [AnswerScalarWhereInput!]
  answer: StringFilter
  authorId: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  questionId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input AnswerUpdateInput {
  answer: StringFieldUpdateOperationsInput
  author: UserUpdateOneRequiredWithoutAnswersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  question: QuestionUpdateOneWithoutAnswersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnswerUpdateManyMutationInput {
  answer: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnswerUpdateManyWithWhereWithoutAuthorInput {
  data: AnswerUpdateManyMutationInput!
  where: AnswerScalarWhereInput!
}

input AnswerUpdateManyWithWhereWithoutQuestionInput {
  data: AnswerUpdateManyMutationInput!
  where: AnswerScalarWhereInput!
}

input AnswerUpdateManyWithoutAuthorInput {
  connect: [AnswerWhereUniqueInput!]
  connectOrCreate: [AnswerCreateOrConnectWithoutAuthorInput!]
  create: [AnswerCreateWithoutAuthorInput!]
  delete: [AnswerWhereUniqueInput!]
  deleteMany: [AnswerScalarWhereInput!]
  disconnect: [AnswerWhereUniqueInput!]
  set: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [AnswerUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutAuthorInput!]
}

input AnswerUpdateManyWithoutQuestionInput {
  connect: [AnswerWhereUniqueInput!]
  connectOrCreate: [AnswerCreateOrConnectWithoutQuestionInput!]
  create: [AnswerCreateWithoutQuestionInput!]
  delete: [AnswerWhereUniqueInput!]
  deleteMany: [AnswerScalarWhereInput!]
  disconnect: [AnswerWhereUniqueInput!]
  set: [AnswerWhereUniqueInput!]
  update: [AnswerUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [AnswerUpdateManyWithWhereWithoutQuestionInput!]
  upsert: [AnswerUpsertWithWhereUniqueWithoutQuestionInput!]
}

input AnswerUpdateWithWhereUniqueWithoutAuthorInput {
  data: AnswerUpdateWithoutAuthorInput!
  where: AnswerWhereUniqueInput!
}

input AnswerUpdateWithWhereUniqueWithoutQuestionInput {
  data: AnswerUpdateWithoutQuestionInput!
  where: AnswerWhereUniqueInput!
}

input AnswerUpdateWithoutAuthorInput {
  answer: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  question: QuestionUpdateOneWithoutAnswersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnswerUpdateWithoutQuestionInput {
  answer: StringFieldUpdateOperationsInput
  author: UserUpdateOneRequiredWithoutAnswersInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnswerUpsertWithWhereUniqueWithoutAuthorInput {
  create: AnswerCreateWithoutAuthorInput!
  update: AnswerUpdateWithoutAuthorInput!
  where: AnswerWhereUniqueInput!
}

input AnswerUpsertWithWhereUniqueWithoutQuestionInput {
  create: AnswerCreateWithoutQuestionInput!
  update: AnswerUpdateWithoutQuestionInput!
  where: AnswerWhereUniqueInput!
}

input AnswerWhereInput {
  AND: [AnswerWhereInput!]
  NOT: [AnswerWhereInput!]
  OR: [AnswerWhereInput!]
  answer: StringFilter
  author: UserWhereInput
  authorId: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  question: QuestionWhereInput
  questionId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input AnswerWhereUniqueInput {
  id: String
}

type Category {
  id: String!
  name: String!
  questions(after: QuestionWhereUniqueInput, before: QuestionWhereUniqueInput, first: Int, last: Int): [Question!]!
}

input CategoryCreateNestedOneWithoutQuestionsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutQuestionsInput
  create: CategoryCreateWithoutQuestionsInput
}

input CategoryCreateOrConnectWithoutQuestionsInput {
  create: CategoryCreateWithoutQuestionsInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutQuestionsInput {
  id: String
  name: String!
}

input CategoryUpdateOneWithoutQuestionsInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutQuestionsInput
  create: CategoryCreateWithoutQuestionsInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateWithoutQuestionsInput
  upsert: CategoryUpsertWithoutQuestionsInput
}

input CategoryUpdateWithoutQuestionsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CategoryUpsertWithoutQuestionsInput {
  create: CategoryCreateWithoutQuestionsInput!
  update: CategoryUpdateWithoutQuestionsInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  id: StringFilter
  name: StringFilter
  questions: QuestionListRelationFilter
}

input CategoryWhereUniqueInput {
  id: String
  name: String
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createOneAnswer(data: AnswerCreateInput!): Answer!
  createOneQuestion(data: QuestionCreateInput!): Question!
  deleteOneAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteOneQuestion(where: QuestionWhereUniqueInput!): Question
  updateOneAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  updateOneQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  question(where: QuestionWhereUniqueInput!): Question
  questions(after: QuestionWhereUniqueInput, before: QuestionWhereUniqueInput, first: Int, last: Int, orderBy: [QuestionOrderByInput!], where: QuestionWhereInput): [Question!]!
}

enum QueryMode {
  default
  insensitive
}

type Question {
  answers(after: AnswerWhereUniqueInput, before: AnswerWhereUniqueInput, first: Int, last: Int): [Answer!]!
  author: User!
  category: Category
  createdAt: DateTime!
  id: String!
  question: String!
  title: String!
}

input QuestionCreateInput {
  answers: AnswerCreateNestedManyWithoutQuestionInput
  author: UserCreateNestedOneWithoutQuestionsInput!
  category: CategoryCreateNestedOneWithoutQuestionsInput
  createdAt: DateTime
  id: String
  question: String!
  title: String!
  updatedAt: DateTime
}

input QuestionCreateNestedManyWithoutAuthorInput {
  connect: [QuestionWhereUniqueInput!]
  connectOrCreate: [QuestionCreateOrConnectWithoutAuthorInput!]
  create: [QuestionCreateWithoutAuthorInput!]
}

input QuestionCreateNestedOneWithoutAnswersInput {
  connect: QuestionWhereUniqueInput
  connectOrCreate: QuestionCreateOrConnectWithoutAnswersInput
  create: QuestionCreateWithoutAnswersInput
}

input QuestionCreateOrConnectWithoutAnswersInput {
  create: QuestionCreateWithoutAnswersInput!
  where: QuestionWhereUniqueInput!
}

input QuestionCreateOrConnectWithoutAuthorInput {
  create: QuestionCreateWithoutAuthorInput!
  where: QuestionWhereUniqueInput!
}

input QuestionCreateWithoutAnswersInput {
  author: UserCreateNestedOneWithoutQuestionsInput!
  category: CategoryCreateNestedOneWithoutQuestionsInput
  createdAt: DateTime
  id: String
  question: String!
  title: String!
  updatedAt: DateTime
}

input QuestionCreateWithoutAuthorInput {
  answers: AnswerCreateNestedManyWithoutQuestionInput
  category: CategoryCreateNestedOneWithoutQuestionsInput
  createdAt: DateTime
  id: String
  question: String!
  title: String!
  updatedAt: DateTime
}

input QuestionListRelationFilter {
  every: QuestionWhereInput
  none: QuestionWhereInput
  some: QuestionWhereInput
}

input QuestionOrderByInput {
  authorId: SortOrder
  categoryName: SortOrder
  createdAt: SortOrder
  id: SortOrder
  question: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input QuestionScalarWhereInput {
  AND: [QuestionScalarWhereInput!]
  NOT: [QuestionScalarWhereInput!]
  OR: [QuestionScalarWhereInput!]
  authorId: IntFilter
  categoryName: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  question: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input QuestionUpdateInput {
  answers: AnswerUpdateManyWithoutQuestionInput
  author: UserUpdateOneRequiredWithoutQuestionsInput
  category: CategoryUpdateOneWithoutQuestionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  question: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input QuestionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  question: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input QuestionUpdateManyWithWhereWithoutAuthorInput {
  data: QuestionUpdateManyMutationInput!
  where: QuestionScalarWhereInput!
}

input QuestionUpdateManyWithoutAuthorInput {
  connect: [QuestionWhereUniqueInput!]
  connectOrCreate: [QuestionCreateOrConnectWithoutAuthorInput!]
  create: [QuestionCreateWithoutAuthorInput!]
  delete: [QuestionWhereUniqueInput!]
  deleteMany: [QuestionScalarWhereInput!]
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [QuestionUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutAuthorInput!]
}

input QuestionUpdateOneWithoutAnswersInput {
  connect: QuestionWhereUniqueInput
  connectOrCreate: QuestionCreateOrConnectWithoutAnswersInput
  create: QuestionCreateWithoutAnswersInput
  delete: Boolean
  disconnect: Boolean
  update: QuestionUpdateWithoutAnswersInput
  upsert: QuestionUpsertWithoutAnswersInput
}

input QuestionUpdateWithWhereUniqueWithoutAuthorInput {
  data: QuestionUpdateWithoutAuthorInput!
  where: QuestionWhereUniqueInput!
}

input QuestionUpdateWithoutAnswersInput {
  author: UserUpdateOneRequiredWithoutQuestionsInput
  category: CategoryUpdateOneWithoutQuestionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  question: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input QuestionUpdateWithoutAuthorInput {
  answers: AnswerUpdateManyWithoutQuestionInput
  category: CategoryUpdateOneWithoutQuestionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  question: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input QuestionUpsertWithWhereUniqueWithoutAuthorInput {
  create: QuestionCreateWithoutAuthorInput!
  update: QuestionUpdateWithoutAuthorInput!
  where: QuestionWhereUniqueInput!
}

input QuestionUpsertWithoutAnswersInput {
  create: QuestionCreateWithoutAnswersInput!
  update: QuestionUpdateWithoutAnswersInput!
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  answers: AnswerListRelationFilter
  author: UserWhereInput
  authorId: IntFilter
  category: CategoryWhereInput
  categoryName: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  question: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input QuestionWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  id: Int!
  image: String
  name: String
}

input UserCreateNestedOneWithoutAnswersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAnswersInput
  create: UserCreateWithoutAnswersInput
}

input UserCreateNestedOneWithoutQuestionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutQuestionsInput
  create: UserCreateWithoutQuestionsInput
}

input UserCreateOrConnectWithoutAnswersInput {
  create: UserCreateWithoutAnswersInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutQuestionsInput {
  create: UserCreateWithoutQuestionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAnswersInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  name: String
  questions: QuestionCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
}

input UserCreateWithoutQuestionsInput {
  answers: AnswerCreateNestedManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  name: String
  updatedAt: DateTime
}

input UserUpdateOneRequiredWithoutAnswersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAnswersInput
  create: UserCreateWithoutAnswersInput
  update: UserUpdateWithoutAnswersInput
  upsert: UserUpsertWithoutAnswersInput
}

input UserUpdateOneRequiredWithoutQuestionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutQuestionsInput
  create: UserCreateWithoutQuestionsInput
  update: UserUpdateWithoutQuestionsInput
  upsert: UserUpsertWithoutQuestionsInput
}

input UserUpdateWithoutAnswersInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  questions: QuestionUpdateManyWithoutAuthorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutQuestionsInput {
  answers: AnswerUpdateManyWithoutAuthorInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutAnswersInput {
  create: UserCreateWithoutAnswersInput!
  update: UserUpdateWithoutAnswersInput!
}

input UserUpsertWithoutQuestionsInput {
  create: UserCreateWithoutQuestionsInput!
  update: UserUpdateWithoutQuestionsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  answers: AnswerListRelationFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  name: StringNullableFilter
  questions: QuestionListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
